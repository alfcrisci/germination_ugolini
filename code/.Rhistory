library(mgcv, lib.loc = "/usr/lib/R/library")
library(mgcv)
remove.packages("mgcv", lib="/usr/lib/R/library")
source('~/Scrivania/lav_vergari_OCR/ocr_bargagli.R')
readr::read_csv("https://github.com/italia/covid19-opendata-vaccini/blob/master/dati/consegne-vaccini-latest.csv")
install.packages(c("cli", "desc", "dplyr", "farver", "gargle", "geojsonR", "googlesheets4", "isoband", "lubridate", "magick", "pillar", "pkgload", "ps", "RcppArmadillo", "rvest", "tibble", "tidyr", "tinytex", "units", "waldo", "wk", "xfun", "zoo"))
library(rjava)
library(rJava)
install.packages("rJava")
library(rgdal)
library(sf)
install.packages("GISTools")
install.packages("rgeos")
90/65
300/200
1000/200
500/65
1184/196
1184/296
97,8*45
97.8*45
8506/68
29.6*0.8
267*0.198
6*8
267*8
mrt_globe
remotes::install_github("alfcrisci/rBiometeo")
devtools::install_github("alfcrisci/rBiometeo")
install.packages("ClimInd")
install.packages("future.apply")
pars=c(shape=1.87, scale=3.57, interval=14, ndays_cov=6.6, ndays_cov_err=1.88);
seq(inidate="2021-01-01",date="2021-01-31",1)
seq.Date(inidate="2021-01-01",date="2021-01-31",1)
seq.Date(inidate=as.Date("2021-01-01"),date=as.Date("2021-01-31"),1)
inidate=as.Date("2021-01-01");date=as.Date("2021-01-31");
seq.Date(inidate,findate,1)
inidate=as.Date("2021-01-01");findate=as.Date("2021-01-31");
seq.Date(inidate,findate,1)
library(reticulate)
np<-import("numpy")
daily_cases = c( 0,   0,   1,   2,   3,   5,  14,  10,  26,  23,  40,  35,  48,  65,  51,  71,  85, 113, 133, 174, 234,
109, 129, 197,169, 244, 172, 268, 148, 167, 198, 180,  82, 177, 185, 126, 141, 137, 136, 132, 111, 123, 150,  96, 149,  96, 129, 127,  92,  78, 45,  77,  79,  86,  53,  48,  57,  51,  47,  28,  76,  30,  53,  16,  48,  35,  37,  28,  23,  21,  44,  29,  29,  31,  18,  23,40,10,  25,  20,  15,  16,  23,  25,  11,  -3,   2,  12,   8,   4,  13,   2,   2,   0,   1,   4,   4,   3,   0,   4,   1,   3,   2,   2,  3,2,   0,   3,   1,   1,   2,   4,   4,   1,   1,   4,   0,   0,   0,   3,   1,   4,   2,   2,   2,   0,   0,   0,   5,   3,   0,   0,  1,  0,   1,   3,   4,   1,   4,   1,   0,   1,   0,   1,   3,   3,   0,   0,   2,   1,   1,   1,   2,   7,   2,  11,  17,   8,  21,   5, 8,   0,   2,   6,   9,  21,   3,  16,   2,   4,  16,  11,  32,  11,   5,   8,  15,   7,  13,  17,  10,   5,   3,  11,   9,  61,  17,12,  15,   2,  16,  17,  21,  17,  32,  20,   6,  15,  19,  40,  41,  27,  39,  11,  14,  38,  37,  29,  24,  31,  17,  18,  32,  17,  33,  26,  24,   5,  26,  23,  28,  42,  59,  59,  22,  35,  84,  66,  49,  86, 108,  37,  82, 166, 140, 115, 121, 204,  98,  89, 226, 321,453, 274, 521, 238, 380, 351, 686, 524, 502, 683, 373, 431, 653, 698, 697, 631, 502, 262, 504, 701, 834, 740, 779, 707, 282, 357,479, 667, 512, 452, 529, 161, 351, 448, 519, 490, 473, 518, 252, 337, 421, 476, 492, 418, 443, 145, 293, 229, 323, 483, 451, 481,174, 228, 480, 467, 381, 369, 372, 162, 363, 498, 415, 603, 206, 181, 131, 508, 585, 703, 693, 285, 372, 355, 458, 743, 346, 564,688, 687, 333, 499, 480, 506, 629, 409, 440, 157, 359, 417, 500, 437, 397, 525, 200,
291, 466, 429, 371, 465, 362, 189, 333, 408,480, 414, 436, 394, 171,270)
np$clip(daily_cases, 0, None)
np$clip(daily_cases, 0)
np.clip
np$clip
np$ones(interval) /interval
interval=14
np$ones(interval) /interval
np$ones(interval)
np$ones(14)
np$ones(integer(14))
np$ones(integer(14))*1
np$ones(integer(14))/14
np$convolve(1:4,1:3)
convolve(1:4,1:3)
convolution(1:4,1:3)
convolution
convolve
convolve(3,4)
convolve(1:3,2:4)
convolution(2:4,1:3)
convolve(1:4,1:4)
np$convolve(1:4,1:4)
convolve(1:4,1:4)
convolve(1:4,1:4,conj=F)
convolve(1:4,1:4)
convolve(1:5,1:4)
125/85
150*1.5
300*1.5
library(raster)
library(ncdf4)
library(ClimateOperators)
library(RCurl)
remotes::install_github("alfcrisci/rBiometeo")
library(rBiometeo)
heat_risk_level(25,0,22.3)
heat_risk_level(30,0,22.3)
heat_risk_level(21,0,22.3)
heat_risk_level(21,0,22.3)
23/21
21/23
19/23
heat_risk_level(19,0,22.3)
heat_risk_level(17,0,22.3)
c(c(6, 10, 14, 18),c(6, 10, 14, 18)+23,c(6, 10, 14, 18)+48))
c(c(6, 10, 14, 18),c(6, 10, 14, 18)+23,c(6, 10, 14, 18)+48)
cat=c("rhcla_acc","rhcla_nacc","rhshacla_acc","rhshacla_acc")
nf=c("O8","O12","O16","O20","D8","D12","D16","D20","DD8","DD12","DD16","DD20")
id=c(c(6, 10, 14, 18),c(6, 10, 14, 18)+24,c(6, 10, 14, 18)+48)
convolve(cat,nf)
expand.grid(cat,nf)
expand.grid(nf,cat)
id=rep(c(c(6, 10, 14, 18),c(6, 10, 14, 18)+24,c(6, 10, 14, 18)+48),4)
apply(expand.grid(nf,cat),1,function(x) paste(x[,1],x[,2]))
apply(expand.grid(nf,cat),1,function(x) paste0(x[1],"_",x[2]))
apply(expand.grid(nf,cat),1,function(x) paste0(x[1],"_",x[2]))
id=c(c(6, 10, 14, 18),c(6, 10, 14, 18)+24,c(6, 10, 14, 18)+48))
name_files=apply(expand.grid(nf,cat),1,function(x) paste0(x[1],"_",x[2],".jpg"))
name_files=apply(expand.grid(nf,cat),1,function(x) paste0(x[1],"_",x[2],".jpg"))
name_files
strftime(Sys.Date(),"%a, %d - %m - %Y %H UTC")
timefromfilebolam=function(x) {strptime(gsub("bolam_","",gsub(".nc","",x)),"%Y%m%d%H",tz="GMT")}
aa="bolam_2021032922.nc"
aa
timefromfilebolam(aa)
if ( length(list.files(pattern="png") > 0 ) {system("rm *.png")}
if ( length(list.files(pattern="png") > 0 )) {system("rm *.png")}
Sys.Date()-10
paste0("wbgtsun_",1:120)
library(reticulate)
library(TTR)
np<-import("numpy")
###########################################################################################################################################################################################################
daily_cases = c( 0,   0,   1,   2,   3,   5,  14,  10,  26,  23,  40,  35,  48,  65,  51,  71,  85, 113, 133, 174, 234,
109, 129, 197,169, 244, 172, 268, 148, 167, 198, 180,  82, 177, 185, 126, 141, 137, 136, 132, 111, 123, 150,  96, 149,  96, 129, 127,  92,  78, 45,  77,  79,  86,  53,  48,  57,  51,  47,  28,  76,  30,  53,  16,  48,  35,  37,  28,  23,  21,  44,  29,  29,  31,  18,  23,40,10,  25,  20,  15,  16,  23,  25,  11,  -3,   2,  12,   8,   4,  13,   2,   2,   0,   1,   4,   4,   3,   0,   4,   1,   3,   2,   2,  3,2,   0,   3,   1,   1,   2,   4,   4,   1,   1,   4,   0,   0,   0,   3,   1,   4,   2,   2,   2,   0,   0,   0,   5,   3,   0,   0,  1,  0,   1,   3,   4,   1,   4,   1,   0,   1,   0,   1,   3,   3,   0,   0,   2,   1,   1,   1,   2,   7,   2,  11,  17,   8,  21,   5, 8,   0,   2,   6,   9,  21,   3,  16,   2,   4,  16,  11,  32,  11,   5,   8,  15,   7,  13,  17,  10,   5,   3,  11,   9,  61,  17,12,  15,   2,  16,  17,  21,  17,  32,  20,   6,  15,  19,  40,  41,  27,  39,  11,  14,  38,  37,  29,  24,  31,  17,  18,  32,  17,  33,  26,  24,   5,  26,  23,  28,  42,  59,  59,  22,  35,  84,  66,  49,  86, 108,  37,  82, 166, 140, 115, 121, 204,  98,  89, 226, 321,453, 274, 521, 238, 380, 351, 686, 524, 502, 683, 373, 431, 653, 698, 697, 631, 502, 262, 504, 701, 834, 740, 779, 707, 282, 357,479, 667, 512, 452, 529, 161, 351, 448, 519, 490, 473, 518, 252, 337, 421, 476, 492, 418, 443, 145, 293, 229, 323, 483, 451, 481,174, 228, 480, 467, 381, 369, 372, 162, 363, 498, 415, 603, 206, 181, 131, 508, 585, 703, 693, 285, 372, 355, 458, 743, 346, 564,688, 687, 333, 499, 480, 506, 629, 409, 440, 157, 359, 417, 500, 437, 397, 525, 200,
291, 466, 429, 371, 465, 362, 189, 333, 408,480, 414, 436, 394, 171,270)
library(reticulate)
library(TTR)
np<-import("numpy")
###########################################################################################################################################################################################################
daily_cases = c( 0,   0,   1,   2,   3,   5,  14,  10,  26,  23,  40,  35,  48,  65,  51,  71,  85, 113, 133, 174, 234,
109, 129, 197,169, 244, 172, 268, 148, 167, 198, 180,  82, 177, 185, 126, 141, 137, 136, 132, 111, 123, 150,  96, 149,  96, 129, 127,  92,  78, 45,  77,  79,  86,  53,  48,  57,  51,  47,  28,  76,  30,  53,  16,  48,  35,  37,  28,  23,  21,  44,  29,  29,  31,  18,  23,40,10,  25,  20,  15,  16,  23,  25,  11,  -3,   2,  12,   8,   4,  13,   2,   2,   0,   1,   4,   4,   3,   0,   4,   1,   3,   2,   2,  3,2,   0,   3,   1,   1,   2,   4,   4,   1,   1,   4,   0,   0,   0,   3,   1,   4,   2,   2,   2,   0,   0,   0,   5,   3,   0,   0,  1,  0,   1,   3,   4,   1,   4,   1,   0,   1,   0,   1,   3,   3,   0,   0,   2,   1,   1,   1,   2,   7,   2,  11,  17,   8,  21,   5, 8,   0,   2,   6,   9,  21,   3,  16,   2,   4,  16,  11,  32,  11,   5,   8,  15,   7,  13,  17,  10,   5,   3,  11,   9,  61,  17,12,  15,   2,  16,  17,  21,  17,  32,  20,   6,  15,  19,  40,  41,  27,  39,  11,  14,  38,  37,  29,  24,  31,  17,  18,  32,  17,  33,  26,  24,   5,  26,  23,  28,  42,  59,  59,  22,  35,  84,  66,  49,  86, 108,  37,  82, 166, 140, 115, 121, 204,  98,  89, 226, 321,453, 274, 521, 238, 380, 351, 686, 524, 502, 683, 373, 431, 653, 698, 697, 631, 502, 262, 504, 701, 834, 740, 779, 707, 282, 357,479, 667, 512, 452, 529, 161, 351, 448, 519, 490, 473, 518, 252, 337, 421, 476, 492, 418, 443, 145, 293, 229, 323, 483, 451, 481,174, 228, 480, 467, 381, 369, 372, 162, 363, 498, 415, 603, 206, 181, 131, 508, 585, 703, 693, 285, 372, 355, 458, 743, 346, 564,688, 687, 333, 499, 480, 506, 629, 409, 440, 157, 359, 417, 500, 437, 397, 525, 200,
291, 466, 429, 371, 465, 362, 189, 333, 408,480, 414, 436, 394, 171,270)
library(reticulate)
library(TTR)
np<-import("numpy")
###########################################################################################################################################################################################################
daily_cases = c( 0,   0,   1,   2,   3,   5,  14,  10,  26,  23,  40,  35,  48,  65,  51,  71,  85, 113, 133, 174, 234,
109, 129, 197,169, 244, 172, 268, 148, 167, 198, 180,  82, 177, 185, 126, 141, 137, 136, 132, 111, 123, 150,  96, 149,  96, 129, 127,  92,  78, 45,  77,  79,  86,  53,  48,  57,  51,  47,  28,  76,  30,  53,  16,  48,  35,  37,  28,  23,  21,  44,  29,  29,  31,  18,  23,40,10,  25,  20,  15,  16,  23,  25,  11,  -3,   2,  12,   8,   4,  13,   2,   2,   0,   1,   4,   4,   3,   0,   4,   1,   3,   2,   2,  3,2,   0,   3,   1,   1,   2,   4,   4,   1,   1,   4,   0,   0,   0,   3,   1,   4,   2,   2,   2,   0,   0,   0,   5,   3,   0,   0,  1,  0,   1,   3,   4,   1,   4,   1,   0,   1,   0,   1,   3,   3,   0,   0,   2,   1,   1,   1,   2,   7,   2,  11,  17,   8,  21,   5, 8,   0,   2,   6,   9,  21,   3,  16,   2,   4,  16,  11,  32,  11,   5,   8,  15,   7,  13,  17,  10,   5,   3,  11,   9,  61,  17,12,  15,   2,  16,  17,  21,  17,  32,  20,   6,  15,  19,  40,  41,  27,  39,  11,  14,  38,  37,  29,  24,  31,  17,  18,  32,  17,  33,  26,  24,   5,  26,  23,  28,  42,  59,  59,  22,  35,  84,  66,  49,  86, 108,  37,  82, 166, 140, 115, 121, 204,  98,  89, 226, 321,453, 274, 521, 238, 380, 351, 686, 524, 502, 683, 373, 431, 653, 698, 697, 631, 502, 262, 504, 701, 834, 740, 779, 707, 282, 357,479, 667, 512, 452, 529, 161, 351, 448, 519, 490, 473, 518, 252, 337, 421, 476, 492, 418, 443, 145, 293, 229, 323, 483, 451, 481,174, 228, 480, 467, 381, 369, 372, 162, 363, 498, 415, 603, 206, 181, 131, 508, 585, 703, 693, 285, 372, 355, 458, 743, 346, 564,688, 687, 333, 499, 480, 506, 629, 409, 440, 157, 359, 417, 500, 437, 397, 525, 200,
291, 466, 429, 371, 465, 362, 189, 333, 408,480, 414, 436, 394, 171,270)
runMean(daily_cases,14)
np$convolve(np$clip(daily_cases, 0, NULL), np$ones(interval) /interval, mode='valid')
interval=as.integer(14)
np$convolve(np$clip(daily_cases, 0, NULL), np$ones(interval) /interval, mode='valid')
ma(daily_cases,14)
ma <- function(x, n = 5){filter(x, rep(1 / n, n), sides = 2)}
ma(daily_cases,14)
zoo:::rollmean (daily_cases,14)
y=np$convolve(np$clip(daily_cases, 0, NULL), np$ones(interval) /interval, mode='valid')
y
np$concatenate((np$full(14 - 1, NA), y))
np$concatenate((np$full(14 - 1, NA), y)
np$full(14 - 1, NA)
np$full(14 - 1, np$nan)
np$full(14)
np$full(14,NA)
np$full(14,NULL)
np$full(as.integer(14),NULL)
np$full(as.integer(14 - 1), NA)
np$concatenate((np$full(as.integer(14 - 1), NA), y))
np$concatenate
np$concatenate(1:4,2)
np$concatenate(1:4,as.integer(2))
np$concatenate(as.integer(1:4)
)
np$concatenate(as.integer(1:4),y)
np$concatenate(as.integer(1:4),as.integer(1:4))
np$concatenate(as.integer(1:4),as.integer(1))
np$concatenate(as.integer(1:4),as.list(1:4))
np$where(y == 0, np.nan, y)
np$where(y == 0, np$nan, y)
runMean(daily_cases,14)
c(rep(NA,interval-1,ma(daily_cases,14))
)
y
y[14]=0
y[y==0]=NA
y[14]
x <- c(5.05, 6.75, 3.21, 2.66)
y <- c(1.65, 26.5, -5.93, 7.96)
lm(y ~ x)$coefficients
x <- c(5.05, 6.75, 3.21, 2.66)
y <- c(1.65, 26.5, -5.93, 7.96)
a=lm(y ~ x)
a
str(a)
summary(a)
summary(a$coefficients)
a
str(a)
summary.lm
lm(y ~ x)$$coefficients[2,2]
lm(y ~ x)$coefficients[2]
lm(y ~ x)$coefficients[2,2]
lm(y ~ x)$coefficients[2]
lm(y ~ x)$coefficients[,2]
coef(summary(lm(y ~ x)))["x","Std. Error"]
lm(y ~ x)$coefficients[2]
install.packages("roll")
y=log(y)
x=1:interval
for
remotes::install_github("alfcrisci/rBiometeo")
223/24
22/7
library(userfriendlyscience)
install.packages("userfriendlyscience")
library(userfriendlyscience)
install.packages("KScorrect")
library(KScorrect)
library(HeatStress)
dewp2hurs(6.8,-3.27)
dewp2hurs(-3.27,6,8)
dewp2hurs(-3.27,6,8)
citation("KScorrect")
install.packages("devtools")
devtools::install_github("daniel1noble/metaDigitise")
install.packages("digitize")
library(metaDigitise)
metaDigitise()
metaDigitise("/home/alf/Scrivania/lav_michelozzi")
library(metaDigitize);metaDigitise("/home/alf/Scrivania/lav_michelozzi")
library(metaDigitizs);metaDigitise("/home/alf/Scrivania/lav_michelozzi")
library(metaDigitise);metaDigitise("/home/alf/Scrivania/lav_michelozzi")
library("openexcel")
library("openxls")
library("openxlsx")
# devtools::install_github("onofriAndreaPG/drcSeedGerm")
library(openxlsx)
library(drc)
library(lmtest)
library(sandwich)
library(drcSeedGerm)
library(tidyr)
library(maditr)
library(multcomp)
setwd("/home/alf/Scrivania/lav_ugolini/germination_ugolini/code")
germination_data=read.xlsx("ugolini_data.xlsx",1)
germination_table=read.xlsx("ugolini_data.xlsx",2)
saveRDS(germination_data,"germination_data.rds")
saveRDS(germination_table,"germination_table.rds")
germination_data=readRDS("germination_data.rds")
germination_table=readRDS("germination_table.rds")
germination_data=read.xlsx("ugolini_data.xlsx",1)
germination_table=read.xlsx("ugolini_data.xlsx",2)
saveRDS(germination_data,"germination_data.rds")
saveRDS(germination_table,"germination_table.rds")
germination_data=readRDS("germination_data.rds")
germination_table=readRDS("germination_table.rds")
name_sp=gsub(" ","_",names(germination_data_ls))
res_summary=list()
res_ed=list()
res_coef=list()
for ( i in seq_along(germination_data_ls)) {
message(names(germination_data_ls)[i])
message("\n")
temp=germination_data_ls[[i]]
temp$day=temp$day+1
temp2=temp %>% dcast(treatment+reply~ day,value.var ="N_seeds_ger")
names(temp2)[2]="Dish"
counts <- temp2[,3:length(temp2[1,])]
treat <- data.frame(tratt=temp2[,1])
nViable <- rep(germination_table_ls[[i]]$seeds,nrow(counts))
moniTimes <- 1:(length(counts)-1)
dataset <- makeDrm(counts=counts, treat=treat, nViable=nViable, moniTimes)
model<- try(drm(propCum~timeBef , data=dataset, curveid = group,fct=LL2.3()))
if ( i ==4) {model<- try(drm(propCum~timeAf , data=dataset, curveid = group,fct=LL2.3()))}
png(filename = paste0(name_sp[i],"_model.png"))
plot(model,log="",col = TRUE,legendPos=c(4,0.6),cex.legend = 0.9,ylim=c(0,0.8),xlab="Days",main=names(germination_data_ls)[i])
dev.off()
if ( i ==3) {
png(filename = paste0(name_sp[i],"_model.png"))
plot(model,log="",col = TRUE,legendPos=c(6,0.6),cex.legend = 0.9,ylim=c(0,0.8),xlab="Days",main=names(germination_data_ls)[i])
dev.off()
}
if ( i ==8) {
png(filename = paste0(name_sp[i],"_model.png"))
plot(model,log="",col = TRUE,legendPos=c(2,0.6),cex.legend = 0.9,ylim=c(0,0.8),xlab="Days",main=names(germination_data_ls)[i])
dev.off()
}
res_ed[[i]]=ED(model, c(10,50,90), interval = "fls") # ED estimates effective doses (ECp/EDp/ICp) for given reponse levels.
res_coef[[i]]=coeftest(model, vcov = sandwich)
res_summary[[i]]=summary(model) # showing a summmary of the model fit (including parameter estimates)
}
setwd("/home/alf/Scrivania/lav_ugolini/germination_ugolini/code")
germination_data=read.xlsx("ugolini_data.xlsx",1)
germination_table=read.xlsx("ugolini_data.xlsx",2)
saveRDS(germination_data,"germination_data.rds")
saveRDS(germination_table,"germination_table.rds")
germination_data=readRDS("germination_data.rds")
germination_table=readRDS("germination_table.rds")
germination_data_ls=split(germination_data,germination_data$specie)
germination_table_ls=split(germination_table,germination_table$species)
name_sp=gsub(" ","_",names(germination_data_ls))
res_summary=list()
res_ed=list()
res_coef=list()
for ( i in seq_along(germination_data_ls)) {
message(names(germination_data_ls)[i])
message("\n")
temp=germination_data_ls[[i]]
temp$day=temp$day+1
temp2=temp %>% dcast(treatment+reply~ day,value.var ="N_seeds_ger")
names(temp2)[2]="Dish"
counts <- temp2[,3:length(temp2[1,])]
treat <- data.frame(tratt=temp2[,1])
nViable <- rep(germination_table_ls[[i]]$seeds,nrow(counts))
moniTimes <- 1:(length(counts)-1)
dataset <- makeDrm(counts=counts, treat=treat, nViable=nViable, moniTimes)
model<- try(drm(propCum~timeBef , data=dataset, curveid = group,fct=LL2.3()))
if ( i ==4) {model<- try(drm(propCum~timeAf , data=dataset, curveid = group,fct=LL2.3()))}
png(filename = paste0(name_sp[i],"_model.png"))
plot(model,log="",col = TRUE,legendPos=c(4,0.6),cex.legend = 0.9,ylim=c(0,0.8),xlab="Days",main=names(germination_data_ls)[i])
dev.off()
if ( i ==3) {
png(filename = paste0(name_sp[i],"_model.png"))
plot(model,log="",col = TRUE,legendPos=c(6,0.6),cex.legend = 0.9,ylim=c(0,0.8),xlab="Days",main=names(germination_data_ls)[i])
dev.off()
}
if ( i ==8) {
png(filename = paste0(name_sp[i],"_model.png"))
plot(model,log="",col = TRUE,legendPos=c(2,0.6),cex.legend = 0.9,ylim=c(0,0.8),xlab="Days",main=names(germination_data_ls)[i])
dev.off()
}
res_ed[[i]]=ED(model, c(10,50,90), interval = "fls") # ED estimates effective doses (ECp/EDp/ICp) for given reponse levels.
res_coef[[i]]=coeftest(model, vcov = sandwich)
res_summary[[i]]=summary(model) # showing a summmary of the model fit (including parameter estimates)
}
names(res_ed)=names(germination_data_ls)
names(res_coef)=names(germination_data_ls)
names(res_summary)=names(germination_data_ls)
model
if ( i ==4) {model<- try(drm(propCum~timeAf , data=dataset, curveid = group,fct=LL2.3()))}
model
i
temp
dataset
library(openxlsx)
library(drc)
library(lmtest)
library(sandwich)
library(drcSeedGerm)
library(tidyr)
library(maditr)
library(multcomp)
setwd("/home/alf/Scrivania/lav_ugolini/germination_ugolini/code")
germination_data=read.xlsx("ugolini_data.xlsx",1)
germination_table=read.xlsx("ugolini_data.xlsx",2)
saveRDS(germination_data,"germination_data.rds")
saveRDS(germination_table,"germination_table.rds")
germination_data=readRDS("germination_data.rds")
germination_table=readRDS("germination_table.rds")
germination_data_ls=split(germination_data,germination_data$specie)
germination_table_ls=split(germination_table,germination_table$species)
name_sp=gsub(" ","_",names(germination_data_ls))
res_summary=list()
res_ed=list()
res_coef=list()
for ( i in seq_along(germination_data_ls)) {
message(names(germination_data_ls)[i])
message("\n")
temp=germination_data_ls[[i]]
temp$day=temp$day+1
temp2=temp %>% dcast(treatment+reply~ day,value.var ="N_seeds_ger")
names(temp2)[2]="Dish"
counts <- temp2[,3:length(temp2[1,])]
treat <- data.frame(tratt=temp2[,1])
nViable <- rep(germination_table_ls[[i]]$seeds,nrow(counts))
moniTimes <- 1:(length(counts)-1)
dataset <- makeDrm(counts=counts, treat=treat, nViable=nViable, moniTimes)
model<- try(drm(propCum~timeBef , data=dataset, curveid = group,fct=LL2.3()))
if ( i ==4) {model<- try(drm(propCum~timeAf , data=dataset, curveid = group,fct=LL2.3()))}
png(filename = paste0(name_sp[i],"_model.png"))
plot(model,log="",col = TRUE,legendPos=c(4,0.6),cex.legend = 0.9,ylim=c(0,0.8),xlab="Days",main=names(germination_data_ls)[i])
dev.off()
if ( i ==3) {
png(filename = paste0(name_sp[i],"_model.png"))
plot(model,log="",col = TRUE,legendPos=c(6,0.6),cex.legend = 0.9,ylim=c(0,0.8),xlab="Days",main=names(germination_data_ls)[i])
dev.off()
}
if ( i ==8) {
png(filename = paste0(name_sp[i],"_model.png"))
plot(model,log="",col = TRUE,legendPos=c(2,0.6),cex.legend = 0.9,ylim=c(0,0.8),xlab="Days",main=names(germination_data_ls)[i])
dev.off()
}
res_ed[[i]]=ED(model, c(10,50,90), interval = "fls") # ED estimates effective doses (ECp/EDp/ICp) for given reponse levels.
res_coef[[i]]=coeftest(model, vcov = sandwich)
res_summary[[i]]=summary(model) # showing a summmary of the model fit (including parameter estimates)
}
names(res_ed)=names(germination_data_ls)
names(res_coef)=names(germination_data_ls)
names(res_summary)=names(germination_data_ls)
names(germination_data_ls)
i=7
message(names(germination_data_ls)[i])
message("\n")
temp=germination_data_ls[[i]]
temp$day=temp$day+1
temp2=temp %>% dcast(treatment+reply~ day,value.var ="N_seeds_ger")
names(temp2)[2]="Dish"
counts <- temp2[,3:length(temp2[1,])]
treat <- data.frame(tratt=temp2[,1])
nViable <- rep(germination_table_ls[[i]]$seeds,nrow(counts))
moniTimes <- 1:(length(counts)-1)
dataset <- makeDrm(counts=counts, treat=treat, nViable=nViable, moniTimes)
model<- try(drm(propCum~timeBef , data=dataset, curveid = group,fct=LL2.3()))
plot(model)
setwd("/home/alf/Scrivania/lav_ugolini/germination_ugolini/code")
germination_data=read.xlsx("ugolini_data.xlsx",1)
germination_table=read.xlsx("ugolini_data.xlsx",2)
saveRDS(germination_data,"germination_data.rds")
saveRDS(germination_table,"germination_table.rds")
germination_data=readRDS("germination_data.rds")
germination_table=readRDS("germination_table.rds")
germination_data_ls=split(germination_data,germination_data$specie)
germination_table_ls=split(germination_table,germination_table$species)
name_sp=gsub(" ","_",names(germination_data_ls))
res_summary=list()
res_ed=list()
res_coef=list()
for ( i in seq_along(germination_data_ls)) {
message(names(germination_data_ls)[i])
message("\n")
temp=germination_data_ls[[i]]
temp$day=temp$day+1
temp2=temp %>% dcast(treatment+reply~ day,value.var ="N_seeds_ger")
names(temp2)[2]="Dish"
counts <- temp2[,3:length(temp2[1,])]
treat <- data.frame(tratt=temp2[,1])
nViable <- rep(germination_table_ls[[i]]$seeds,nrow(counts))
moniTimes <- 1:(length(counts)-1)
dataset <- makeDrm(counts=counts, treat=treat, nViable=nViable, moniTimes)
model<- try(drm(propCum~timeBef , data=dataset, curveid = group,fct=LL2.3()))
if ( i ==4) {model<- try(drm(propCum~timeAf , data=dataset, curveid = group,fct=LL2.3()))}
png(filename = paste0(name_sp[i],"_model.png"))
plot(model,log="",col = TRUE,legendPos=c(4,0.6),cex.legend = 0.9,ylim=c(0,1),xlab="Days",main=names(germination_data_ls)[i])
dev.off()
if ( i ==3) {
png(filename = paste0(name_sp[i],"_model.png"))
plot(model,log="",col = TRUE,legendPos=c(6,0.6),cex.legend = 0.9,ylim=c(0,1),xlab="Days",main=names(germination_data_ls)[i])
dev.off()
}
if ( i ==8) {
png(filename = paste0(name_sp[i],"_model.png"))
plot(model,log="",col = TRUE,legendPos=c(2,0.6),cex.legend = 0.9,ylim=c(0,1),xlab="Days",main=names(germination_data_ls)[i])
dev.off()
}
res_ed[[i]]=ED(model, c(10,50,90), interval = "fls") # ED estimates effective doses (ECp/EDp/ICp) for given reponse levels.
res_coef[[i]]=coeftest(model, vcov = sandwich)
res_summary[[i]]=summary(model) # showing a summmary of the model fit (including parameter estimates)
}
names(res_ed)=names(germination_data_ls)
names(res_coef)=names(germination_data_ls)
names(res_summary)=names(germination_data_ls)
names(germination_data_ls)
plot(model)
plot(model,log="",col = TRUE,legendPos=c(2,0.6),cex.legend = 0.9,ylim=c(0,1.1),xlab="Days",main=names(germination_data_ls)[i])
plot(model,log="",col = TRUE,legendPos=c(2,0.8),cex.legend = 0.9,ylim=c(0,1.1),xlab="Days",main=names(germination_data_ls)[i])
plot(model,log="",col = TRUE,legendPos=c(2,0.9),cex.legend = 0.9,ylim=c(0,1.1),xlab="Days",main=names(germination_data_ls)[i])
i=7
message(names(germination_data_ls)[i])
message("\n")
temp=germination_data_ls[[i]]
temp$day=temp$day+1
temp2=temp %>% dcast(treatment+reply~ day,value.var ="N_seeds_ger")
names(temp2)[2]="Dish"
counts <- temp2[,3:length(temp2[1,])]
treat <- data.frame(tratt=temp2[,1])
nViable <- rep(germination_table_ls[[i]]$seeds,nrow(counts))
moniTimes <- 1:(length(counts)-1)
dataset <- makeDrm(counts=counts, treat=treat, nViable=nViable, moniTimes)
model<- try(drm(propCum~timeBef , data=dataset, curveid = group,fct=LL2.3()))
model
plot(model,log="",col = TRUE,legendPos=c(6,0.6),cex.legend = 0.9,ylim=c(0,1),xlab="Days",main=names(germination_data_ls)[i])
plot(model,log="",col = TRUE,legendPos=c(2,0.8),cex.legend = 0.9,ylim=c(0,1),xlab="Days",main=names(germination_data_ls)[i])
plot(model,log="",col = TRUE,legendPos=c(2,0.9),cex.legend = 0.9,ylim=c(0,1),xlab="Days",main=names(germination_data_ls)[i])
res_summary=list()
res_ed=list()
res_coef=list()
for ( i in seq_along(germination_data_ls)) {
message(names(germination_data_ls)[i])
message("\n")
temp=germination_data_ls[[i]]
temp$day=temp$day+1
temp2=temp %>% dcast(treatment+reply~ day,value.var ="N_seeds_ger")
names(temp2)[2]="Dish"
counts <- temp2[,3:length(temp2[1,])]
treat <- data.frame(tratt=temp2[,1])
nViable <- rep(germination_table_ls[[i]]$seeds,nrow(counts))
moniTimes <- 1:(length(counts)-1)
dataset <- makeDrm(counts=counts, treat=treat, nViable=nViable, moniTimes)
model<- try(drm(propCum~timeBef , data=dataset, curveid = group,fct=LL2.3()))
if ( i ==4) {model<- try(drm(propCum~timeAf , data=dataset, curveid = group,fct=LL2.3()))}
png(filename = paste0(name_sp[i],"_model.png"))
plot(model,log="",col = TRUE,legendPos=c(4,0.6),cex.legend = 0.9,ylim=c(0,1),xlab="Days",main=names(germination_data_ls)[i])
dev.off()
if ( i ==3) {
png(filename = paste0(name_sp[i],"_model.png"))
plot(model,log="",col = TRUE,legendPos=c(6,0.6),cex.legend = 0.9,ylim=c(0,1),xlab="Days",main=names(germination_data_ls)[i])
dev.off()
}
if ( i ==7) {
png(filename = paste0(name_sp[i],"_model.png"))
plot(model,log="",col = TRUE,legendPos=c(2,0.9),cex.legend = 0.9,ylim=c(0,1),xlab="Days",main=names(germination_data_ls)[i])
dev.off()
}
if ( i ==8) {
png(filename = paste0(name_sp[i],"_model.png"))
plot(model,log="",col = TRUE,legendPos=c(2,0.9),cex.legend = 0.9,ylim=c(0,1.1),xlab="Days",main=names(germination_data_ls)[i])
dev.off()
}
res_ed[[i]]=ED(model, c(10,50,90), interval = "fls") # ED estimates effective doses (ECp/EDp/ICp) for given reponse levels.
res_coef[[i]]=coeftest(model, vcov = sandwich)
res_summary[[i]]=summary(model) # showing a summmary of the model fit (including parameter estimates)
}
names(res_ed)=names(germination_data_ls)
names(res_coef)=names(germination_data_ls)
names(res_summary)=names(germination_data_ls)
